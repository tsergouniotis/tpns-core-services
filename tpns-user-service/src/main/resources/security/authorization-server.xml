<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd 
http://www.springframework.org/schema/data/jpa 
http://www.springframework.org/schema/data/jpa/spring-jpa.xsd 
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task.xsd 
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd 
http://www.springframework.org/schema/security/oauth2 
http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<!-- Token Store -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg name="dataSource" ref="dataSource" />
	</bean>

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="client-details-service" />
	</bean>
	
	<bean id="client-details-service"
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
		<constructor-arg name="dataSource" ref="dataSource" />
	</bean>	
	
	<!-- Custom Limit Login Authentication Provider start -->	
	
	<bean id="customUserDetailsService" class="com.tpns.user.service.CustomUserDetailsService">
		<property name="dataSource" ref="dataSource" />			
		<property name="usersByUsernameQuery" value="select * from users where username = ?" />	
		<property name="authoritiesByUsernameQuery" value="select u.username, r.role from users u inner join user_roles r on r.user_id=u.user_id where username = ?" />	
		<property name="rolePrefix" value="ROLE_" />			
	</bean>
	
	<bean id="limitLoginAuthenticationProvider" class="com.tpns.user.web.handler.LimitLoginAuthenticationProvider">
		<property name="userDetailsService" ref="customUserDetailsService" />		
	</bean>
	
	<!-- Custom Limit Login Authentication Provider end -->	

	<oauth2:authorization-server
		token-endpoint-url="/oauth/token" authorization-endpoint-url="/oauth/authorize"
		user-approval-page="forward:/oauth/confirm_access"
		client-details-service-ref="client-details-service"
		token-services-ref="tokenServices">
		<oauth2:authorization-code />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<bean id="checkTokenEndpoint"
		class="org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint">
		<constructor-arg name="resourceServerTokenServices"
			ref="tokenServices" />
	</bean>

	<sec:http create-session="stateless" use-expressions="false"
		authentication-manager-ref="clientAuthenticationManager" pattern="/oauth/**">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:intercept-url pattern="/oauth/check_token"
			access="IS_AUTHENTICATED_FULLY" />
		<sec:csrf disabled="true" />
		<sec:anonymous enabled="true" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="tpns" />
	</bean>

	<sec:authentication-manager id="clientAuthenticationManager">
		<sec:authentication-provider
			user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>

	<sec:authentication-manager>
		<sec:authentication-provider ref="limitLoginAuthenticationProvider" />
	</sec:authentication-manager>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="client-details-service" />
	</bean>

	<!-- run-as-manager-ref="runAsManagerImpl" -->
	<sec:global-method-security
		proxy-target-class="true" secured-annotations="enabled"
		pre-post-annotations="enabled">
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth2:expression-handler id="oauthExpressionHandler" />
	<oauth2:web-expression-handler id="oauthWebExpressionHandler" />


</beans>